<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from com.joineryhq.dupmon/xml/schema/CRM/Dupmon/dupmonRuleMonitor.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:ac70cd386c42ae2fb7a4dab79d9b789a)
 */
use CRM_Dupmon_ExtensionUtil as E;

/**
 * Database access object for the DupmonRuleMonitor entity.
 */
class CRM_Dupmon_DAO_DupmonRuleMonitor extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_dupmon_rule_monitor';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique DupmonRuleMonitor ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * FK to Dedupe Rule Group
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $rule_group_id;

  /**
   * maximum number of contacts to scan with this rule ()
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $scan_limit;

  /**
   * minimum contact ID to scan with this rule (1 + max cid from previous scan)
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $min_cid;

  /**
   * FK to civicrm_group.id (limit monitor to contacts in this group, if specified)
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $limit_group_id;

  /**
   * Is this monitor active?
   *
   * @var bool|string|null
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $is_active;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_dupmon_rule_monitor';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Dupmon Rule Monitors') : E::ts('Dupmon Rule Monitor');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'rule_group_id', 'civicrm_dedupe_rule_group', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'limit_group_id', 'civicrm_group', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique DupmonRuleMonitor ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_dupmon_rule_monitor.id',
          'table_name' => 'civicrm_dupmon_rule_monitor',
          'entity' => 'DupmonRuleMonitor',
          'bao' => 'CRM_Dupmon_DAO_DupmonRuleMonitor',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'rule_group_id' => [
          'name' => 'rule_group_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Rule Group ID'),
          'description' => E::ts('FK to Dedupe Rule Group'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_dupmon_rule_monitor.rule_group_id',
          'table_name' => 'civicrm_dupmon_rule_monitor',
          'entity' => 'DupmonRuleMonitor',
          'bao' => 'CRM_Dupmon_DAO_DupmonRuleMonitor',
          'localizable' => 0,
          'FKClassName' => 'CRM_Dedupe_DAO_DedupeRuleGroup',
          'add' => NULL,
        ],
        'scan_limit' => [
          'name' => 'scan_limit',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Scan Limit'),
          'description' => E::ts('maximum number of contacts to scan with this rule ()'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_dupmon_rule_monitor.scan_limit',
          'table_name' => 'civicrm_dupmon_rule_monitor',
          'entity' => 'DupmonRuleMonitor',
          'bao' => 'CRM_Dupmon_DAO_DupmonRuleMonitor',
          'localizable' => 0,
          'add' => NULL,
        ],
        'min_cid' => [
          'name' => 'min_cid',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Min Cid'),
          'description' => E::ts('minimum contact ID to scan with this rule (1 + max cid from previous scan)'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_dupmon_rule_monitor.min_cid',
          'default' => '0',
          'table_name' => 'civicrm_dupmon_rule_monitor',
          'entity' => 'DupmonRuleMonitor',
          'bao' => 'CRM_Dupmon_DAO_DupmonRuleMonitor',
          'localizable' => 0,
          'add' => NULL,
        ],
        'limit_group_id' => [
          'name' => 'limit_group_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Limit Group ID'),
          'description' => E::ts('FK to civicrm_group.id (limit monitor to contacts in this group, if specified)'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_dupmon_rule_monitor.limit_group_id',
          'table_name' => 'civicrm_dupmon_rule_monitor',
          'entity' => 'DupmonRuleMonitor',
          'bao' => 'CRM_Dupmon_DAO_DupmonRuleMonitor',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Group',
          'add' => NULL,
        ],
        'is_active' => [
          'name' => 'is_active',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Enabled'),
          'description' => E::ts('Is this monitor active?'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_dupmon_rule_monitor.is_active',
          'default' => '1',
          'table_name' => 'civicrm_dupmon_rule_monitor',
          'entity' => 'DupmonRuleMonitor',
          'bao' => 'CRM_Dupmon_DAO_DupmonRuleMonitor',
          'localizable' => 0,
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'dupmon_rule_monitor', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'dupmon_rule_monitor', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [
      'is_active' => [
        'name' => 'is_active',
        'field' => [
          0 => 'rule_group_id',
        ],
        'localizable' => FALSE,
        'unique' => TRUE,
        'sig' => 'civicrm_dupmon_rule_monitor::1::rule_group_id',
      ],
    ];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
